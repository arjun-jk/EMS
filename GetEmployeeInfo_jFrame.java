import java.awt.BorderLayout;
import java.text.DecimalFormat;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.table.*;
import javax.swing.DefaultListModel;
import javax.swing.DefaultListSelectionModel;


public class GetEmployeeInfo_jFrame extends javax.swing.JFrame {

    private MyHashTable mainHT;  // This contains the ref value for theHT of MainJFrame.
    private DefaultTableModel model1;
    private DefaultTableModel model2;
    private static final DecimalFormat currency = new DecimalFormat("0.00");
    private static final DecimalFormat time = new DecimalFormat("0.0:");
    
    //Creates new form GetEmployeeInfo_jFrame
    public GetEmployeeInfo_jFrame() {
        
        initComponents();
        employeeList.setSelectionMode(DefaultListSelectionModel.SINGLE_SELECTION);
        employeeList.setVisible(false);
        employeeListScrollPane.setVisible(false);
        empNumText.setVisible(false);
        getEmployeePromptLabel.setVisible(false);
        getEmployeeButton.setVisible(false);
        generalInfoLabel.setVisible(false);
        generalInfoTable.setVisible(false);
        generalInfoScrollPane.setVisible(false);
        salaryInfoLabel.setVisible(false);
        salaryInfoTable.setVisible(false);
        salaryInfoScrollPane.setVisible(false);   
        dividerLabel.setVisible(false);
    }

    public void setMainHT(MyHashTable theRefVal) {
        mainHT = theRefVal;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        getEmployeePromptLabel = new javax.swing.JLabel();
        empNumText = new javax.swing.JTextField();
        getEmployeeButton = new javax.swing.JButton();
        generalInfoScrollPane = new javax.swing.JScrollPane();
        generalInfoTable = new javax.swing.JTable();
        dividerLabel = new javax.swing.JLabel();
        generalInfoLabel = new javax.swing.JLabel();
        salaryInfoLabel = new javax.swing.JLabel();
        salaryInfoScrollPane = new javax.swing.JScrollPane();
        salaryInfoTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        employeeNumberSearchButton = new javax.swing.JRadioButton();
        employeeListButton = new javax.swing.JRadioButton();
        exitButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        employeeListScrollPane = new javax.swing.JScrollPane();
        employeeList = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        getEmployeePromptLabel.setText("Prompt to user");

        getEmployeeButton.setText("Get employee info");
        getEmployeeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getEmployeeInfo(evt);
            }
        });

        model1 = new DefaultTableModel(new Object[]{"Status",
            "Employee Number",
            "First Name",
            "Last Name",},
        1);
    generalInfoTable.setModel(model1);
    generalInfoTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
    generalInfoTable.setFillsViewportHeight(true);
    generalInfoTable.getColumnModel().getColumn(0).setPreferredWidth(75);
    generalInfoTable.getColumnModel().getColumn(1).setPreferredWidth(115);
    generalInfoTable.getColumnModel().getColumn(2).setPreferredWidth(75);
    generalInfoTable.getColumnModel().getColumn(3).setPreferredWidth(90);
    generalInfoTable.setShowGrid(false);
    generalInfoTable.setShowVerticalLines(true);
    generalInfoScrollPane.setViewportView(generalInfoTable);

    dividerLabel.setText("——————————————————————————————————————————————");

    generalInfoLabel.setText("General Info");

    salaryInfoLabel.setText("Salary Info");

    salaryInfoTable.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {
        },
        new String [] {
        }
    ));
    salaryInfoTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
    salaryInfoTable.setFillsViewportHeight(true);
    salaryInfoTable.setShowGrid(false);
    salaryInfoTable.setShowVerticalLines(true);
    salaryInfoScrollPane.setViewportView(salaryInfoTable);

    jLabel1.setText("Would you like to find the employee whose info you want by searching for them using their employee number, or scrolling through a list of all the employees?");

    buttonGroup1.add(employeeNumberSearchButton);
    employeeNumberSearchButton.setText("Employee Number Search");
    employeeNumberSearchButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            empNumOptionPressed(evt);
        }
    });

    buttonGroup1.add(employeeListButton);
    employeeListButton.setText("List of Employees");
    employeeListButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            empListOptionPressed(evt);
        }
    });

    exitButton.setText("Exit");
    exitButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            exitGetEmployeeInfo(evt);
        }
    });

    employeeListScrollPane.setViewportView(employeeList);

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(employeeListScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 186, Short.MAX_VALUE)
    );
    jPanel1Layout.setVerticalGroup(
        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
            .addGap(0, 0, Short.MAX_VALUE)
            .addComponent(employeeListScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addGap(23, 23, 23)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(employeeNumberSearchButton)
                                    .addGap(18, 18, 18)
                                    .addComponent(employeeListButton)
                                    .addGap(18, 18, 18)
                                    .addComponent(exitButton))
                                .addComponent(getEmployeePromptLabel))
                            .addGap(0, 360, Short.MAX_VALUE)))
                    .addContainerGap())
                .addGroup(layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(getEmployeeButton)
                        .addComponent(salaryInfoLabel)
                        .addComponent(salaryInfoScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 502, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(generalInfoLabel)
                        .addComponent(generalInfoScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(dividerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 561, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(empNumText, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGap(0, 0, Short.MAX_VALUE))))
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addGap(22, 22, 22)
            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(18, 18, 18)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(employeeNumberSearchButton)
                .addComponent(employeeListButton)
                .addComponent(exitButton))
            .addGap(18, 18, 18)
            .addComponent(getEmployeePromptLabel)
            .addGap(18, 18, 18)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(empNumText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(18, 18, 18)
            .addComponent(getEmployeeButton)
            .addGap(18, 18, 18)
            .addComponent(dividerLabel)
            .addGap(18, 18, 18)
            .addComponent(generalInfoLabel)
            .addGap(26, 26, 26)
            .addComponent(generalInfoScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(19, 19, 19)
            .addComponent(salaryInfoLabel)
            .addGap(18, 18, 18)
            .addComponent(salaryInfoScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(57, Short.MAX_VALUE))
    );

    pack();
    setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    
    /* Triggered when the "Get employee info" button is pressed. Gets the employees info
       from the hash table, and presents it in a table format */
    private void getEmployeeInfo(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getEmployeeInfo
        // TODO add your handling code here:
        
        EmployeeInfo theEmp = null;
        
        if (employeeNumberSearchButton.isSelected()) {
            
            if (!empNumText.getText().isEmpty()) {

                if ((empNumText.getText().length() != 6)) {
                    JOptionPane.showMessageDialog(this, "The employee number"
                    + " must be 6 digits!", "Invalid Employee Number",
                    JOptionPane.WARNING_MESSAGE);
                    return;
                }

                try {
                    
                    int theEmpNum = Integer.parseInt(empNumText.getText());
                    theEmp = mainHT.getEmployee(theEmpNum);
                }

                catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(
                            this, "The employee number"
                    + " must be 6 digits!", "Invalid Employee Number",
                    JOptionPane.WARNING_MESSAGE);
                }
            }
        }
        
        else if (employeeListButton.isSelected()) {
            
            List selectedEmployees = employeeList.getSelectedValuesList();

            if (!selectedEmployees.isEmpty()) {

                for (int i = 0; i < selectedEmployees.size(); i++) {

                    String currentEmployee = (String) selectedEmployees.get(i);

                    Pattern pattern = Pattern.compile("[0-9]{6}");
                    Matcher matcher = pattern.matcher(currentEmployee);
                    matcher.find();
                    int theEmpNum = Integer.parseInt(currentEmployee.substring(matcher.start(), 
                                                     matcher.end()));
                    theEmp = mainHT.getEmployee(theEmpNum);
                }
            }
        }
        
        else {
            
            JOptionPane.showMessageDialog(this, "Please choose a method to" +
            " find the employee(s) you want to know about!", "Choose Search Method!",
            JOptionPane.WARNING_MESSAGE);
            return;
        } 
        
        if (theEmp == null) {
            JOptionPane.showMessageDialog(this, "That employee number is"
            + " not in the database. Please make sure no typos were made",
            "Employee Number Not Found", JOptionPane.WARNING_MESSAGE);
        } 
        
        else {

            generalInfoLabel.setVisible(true);
            generalInfoTable.setVisible(true);
            generalInfoScrollPane.setVisible(true);
            salaryInfoLabel.setVisible(true);
            salaryInfoTable.setVisible(true);
            salaryInfoScrollPane.setVisible(true);
            dividerLabel.setVisible(true);
            
            generalInfoTable.setValueAt(theEmp.empNum, 0, 1);
            generalInfoTable.setValueAt(theEmp.firstName, 0, 2);
            generalInfoTable.setValueAt(theEmp.lastName, 0, 3);

            if (theEmp instanceof FTE) {

                model2 = new DefaultTableModel(new Object[]{"Annual Salary",
                                                            "Deduction Rate",
                                                            "Annual Net Income",},
                                                            1);

                salaryInfoTable.setModel(model2);

                FTE FTEmp = (FTE) theEmp;

                generalInfoTable.setValueAt("Full Time", 0, 0);
                salaryInfoTable.setValueAt("$" + currency.format(FTEmp.yearlySalary), 0, 0);
                salaryInfoTable.setValueAt(currency.format(FTEmp.deductRate), 0, 1);
                salaryInfoTable.setValueAt("$" + currency.format(FTEmp.calcNetAnnualIncome()), 0, 2);

                salaryInfoTable.getColumnModel().getColumn(0).setPreferredWidth(100);
                salaryInfoTable.getColumnModel().getColumn(1).setPreferredWidth(100);
                salaryInfoTable.getColumnModel().getColumn(2).setPreferredWidth(100);
            } 
            
            else {

                model2 = new DefaultTableModel(new Object[]{"Hourly Wage",
                                                            "Hours Per Week",
                                                            "Weeks Per Year",
                                                            "Deduction Rate",
                                                            "Annual Net Income",},
                                                            1);

                salaryInfoTable.setModel(model2);

                PTE PTEmp = (PTE) theEmp;

                generalInfoTable.setValueAt("Full Time", 0, 0);
                salaryInfoTable.setValueAt("$" + currency.format(PTEmp.hourlyWage), 0, 0);
                salaryInfoTable.setValueAt(time.format(PTEmp.hoursPerWeek), 0, 1);
                salaryInfoTable.setValueAt(time.format(PTEmp.weeksPerYear), 0, 2);
                salaryInfoTable.setValueAt(currency.format(PTEmp.deductRate), 0, 3);
                salaryInfoTable.setValueAt("$" + currency.format(PTEmp.calcNetAnnualIncome()), 0, 4);

                salaryInfoTable.getColumnModel().getColumn(0).setPreferredWidth(85);
                salaryInfoTable.getColumnModel().getColumn(1).setPreferredWidth(100);
                salaryInfoTable.getColumnModel().getColumn(2).setPreferredWidth(100);
                salaryInfoTable.getColumnModel().getColumn(3).setPreferredWidth(97);
                salaryInfoTable.getColumnModel().getColumn(4).setPreferredWidth(120);
            }
        }
    }//GEN-LAST:event_getEmployeeInfo

    // Sets up a JTextField where the user can input an employee number in order to identify an employee to get
    private void empNumOptionPressed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_empNumOptionPressed
        // TODO add your handling code here:

        getEmployeePromptLabel.setText("Enter the employee number of the employee whose info you want: ");
        getEmployeePromptLabel.setVisible(true);
        empNumText.setVisible(true);
        getEmployeeButton.setVisible(true);
        employeeList.setVisible(false);
        employeeListScrollPane.setVisible(false);
    }//GEN-LAST:event_empNumOptionPressed

    // Creates a JList with all the employees in the system
    private void empListOptionPressed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_empListOptionPressed
        // TODO add your handling code here:

        DefaultListModel<String> listModel = new DefaultListModel<>();

        for (int i = 0; i < mainHT.buckets.length; i++) {
            for (int j = 0; j < mainHT.buckets[i].size(); j++) {

                EmployeeInfo theEmp = mainHT.buckets[i].get(j);
                listModel.addElement(theEmp.firstName + " " + theEmp.lastName
                + " (" + (theEmp.empNum) + ")");
            }
        }

        getEmployeePromptLabel.setText("From the list below, select the employee whose info you want to get: ");
        getEmployeePromptLabel.setVisible(true);
        employeeList.setModel(listModel);
        employeeList.setVisible(true);
        employeeListScrollPane.setVisible(true);
        getEmployeeButton.setVisible(true);
        empNumText.setVisible(false);
    }//GEN-LAST:event_empListOptionPressed

    // Triggered when the "Exit" button is pressed. Closes the JFrame.
    private void exitGetEmployeeInfo(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitGetEmployeeInfo
        // TODO add your handling code here:
        this.dispose(); // Make this window disappear
    }//GEN-LAST:event_exitGetEmployeeInfo

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GetEmployeeInfo_jFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GetEmployeeInfo_jFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GetEmployeeInfo_jFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GetEmployeeInfo_jFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GetEmployeeInfo_jFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel dividerLabel;
    private javax.swing.JTextField empNumText;
    private javax.swing.JList<String> employeeList;
    private javax.swing.JRadioButton employeeListButton;
    private javax.swing.JScrollPane employeeListScrollPane;
    private javax.swing.JRadioButton employeeNumberSearchButton;
    private javax.swing.JButton exitButton;
    private javax.swing.JLabel generalInfoLabel;
    private javax.swing.JScrollPane generalInfoScrollPane;
    private javax.swing.JTable generalInfoTable;
    private javax.swing.JButton getEmployeeButton;
    private javax.swing.JLabel getEmployeePromptLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel salaryInfoLabel;
    private javax.swing.JScrollPane salaryInfoScrollPane;
    private javax.swing.JTable salaryInfoTable;
    // End of variables declaration//GEN-END:variables
}
